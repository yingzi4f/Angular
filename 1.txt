任务分配第⼀阶段
个⼈作业
截⽌⽇期：2025 年 9 ⽉ 3 ⽇星期三上午 8 点
介绍
您需要为⽂本/视频聊天系统构建服务器和前端。
聊天系统将允许⽤⼾在不同的群组和频道内实时交流。⽹站将设置三个级别的权限。
1.超级管理员
2. 群组管理员
3. ⽤⼾
该解决⽅案必须使⽤ MEAN 堆栈（MongoDB、Express、Angular、Node）以及 sockets.io 和 
Peer.js 来实现。
⽂档
您需要提供实施⽂档。您需要提供以下⽂件：
· 描述您的 Git 存储库的组织以及您在解决⽅案开发过程中如何使⽤它（分⽀、更
新频率、服务器/前端等）
· 客⼾端和服务器端使⽤的数据结构描述，⽤于表⽰各种实体，例如：⽤⼾、组、频
道等。
· Angular 架构：组件、服务、模型、路由。
· Node 服务器架构：模块、函数、⽂件、全局变量。
· 服务器端路由、参数、返回值及其⽤途的列表
· 描述客⼾端与服务器交互的细节，指出服务器端的数据将如何改变，以及每个⻆度
组件⻚⾯的显⽰将如何更新。
Git（源代码版本控制）
在开发聊天系统的过程中，必须使⽤ Git。我们建议您使⽤ GitHub 并与您的评分员分享代码库。
我们会根据代码库的频繁更新和 Git 功能的使⽤情况进⾏评分。
要求
团体
· 获得群组管理员或超级管理员许可成为群组成员的聊天⽤⼾集合。
· 可以存在多个组。
· 每个组可以有多个管理员。
· 每个聊天⽤⼾可以存在于多个组中。
· ⼀个群组管理员可以管理多个群组。
· 超级管理员批准⽤⼾升级（晋升）为群组管理员。
· 群组管理员只能管理⾃⼰创建的群组。
· 如果群组管理员被删除，超级管理员将可以访问所有群组。
渠道
每个⼩组都可以访问多个频道进⾏聊天。
⼀旦⽤⼾成为某个群组的成员，他们就可以选择该群组中任何现有的频道进⾏聊天。
⽤⼾
聊天⽤⼾的模型⾄少需要：
⽤⼾名、电⼦邮件、ID、⻆⾊[ ]、组[ ]
超级管理员
· 超级管理员可以将聊天⽤⼾提升为群组管理员⻆⾊。
· 超级管理员可以删除任何聊天⽤⼾。
· 超级管理员可以将聊天⽤⼾升级为超级管理员⻆⾊。
· 超级管理员拥有群组管理员的所有功能
群组管理员
· 群组管理员可以创建群组。
· 群组管理员将在群组内创建频道（⼦群组）。
· 群组管理员可以从他们管理的群组中删除群组、频道和聊天⽤⼾。· 群组管理员可以删
除聊天⽤⼾（从他们管理的群组中）
· 群组管理员只能修改/删除他们创建的群组。
· 群组管理员可以禁⽌⽤⼾进⼊频道并向超级管理员报告。
聊天⽤⼾
· 系统⽤⼾可以创建新的聊天⽤⼾。（⽤⼾名是唯⼀的）
· 聊天⽤⼾⼀旦成为群组成员即可加⼊群组中的任何频道。
· 聊天⽤⼾可以注册对某个群组的兴趣，然后由群组管理员添加。
· 聊天⽤⼾可以离开他们所属的⼀个或多个群组。
· 聊天⽤⼾可以删除⾃⼰
· 聊天⽤⼾由其⽤⼾名唯⼀标识
· 聊天⽤⼾可以注销。
⽤⼾⾝份验证
最初有⼀个名为“super”的⽤⼾，密码为“123”，他也是超级管理员。
您应该添加对聊天⽤⼾输⼊⽤⼾名/密码的⽀持。如果⽤⼾名/密码不匹配，应该要求⽤⼾重新登
录。（简单的⽤⼾名/密码验证并⾮最佳实践，但就本主题⽽⾔已经⾜够了）。
未经某个⻆⾊的⾝份验证，⽤⼾将⽆法访问⽹站的功能，并且只能看到其⻆⾊允许的功能。
⽤⼾⾝份验证通过后，⻚⾯应显⽰聊天⽤⼾已添加到的群组。选择群组和频道组合后，⽤⼾即可开
始与该频道中的其他⽤⼾聊天。
对于超级管理员、群组管理员，⻚⾯也应该根据他们的⻆⾊能⼒显⽰相应的UI，分别添加/修
改/删除⽤⼾、群组和频道。
数据存储
基于浏览器（客⼾端）的本地存储可⽤于存储数据结构，直到我们在作业的第⼆阶段引⼊ 
MongoDB。
提交作业
对于作业 1，你需要提交⽂档以及前端 Angular 和服务器端源代码的 zip ⽂件。请在⽂件名中包
含你的 snumber。
提交什么
1. 提交请通过 Github 仓库进⾏。你的导师应该被授予访问私有仓库的权限。（记住不要将任
何“node_modules”⽬录添加到你的 Git 仓库中。）
2. ⽂档应位于你的 GitHub 仓库中名为 README.md 的⽂件中。该⽂件应使⽤ Markdown 语
法编写。
3. README.md ⽂件中的⽂本副本也应以 word ⽂档形式提交给 Canvas
作业 2 的更多信息。（注意）
MongoDB、Sockets、图像和视频⽀持尚未在任务第⼀阶段实现。
MongoDB
 Node.js 服务器存储将使⽤ MongoDB 数据库。Mongo 数据库应存储所有⽤⼾、群组、频道数据以
及聊天历史记录。
插座
Socket.io 将⽤于⽀持前端应⽤程序和服务器之间的双向通信，以实现实时数据（聊天等）。
图像⽀持
聊天系统应允许⽤⼾指定个⼈资料图⽚（即头像）。该头像应与⽤⼾发布的聊天历史记录中的⽤⼾
名⼀同显⽰。聊天系统还应⽀持在聊天消息中发送图⽚，并向所有查看聊天的⽤⼾显⽰。服务器上
的图⽚存储可以作为指定⽬录中的⽂件，⽂件路径存储在 Mongo 数据库中。
视频⽀持
聊天系统应该允许⽤⼾进⾏视频聊天。PeerJS 可以在 Angular 端使⽤，Peer 服务器可以在服务
器端实现。这需要加密连接 (SSL)。为了演⽰视频聊天功能，您可以使⽤ elf 服务器来托管您的服
务器。
(https://elf.ict.griffith.edu.au )
频道历史记录
加⼊频道后，聊天⽤⼾应该可以看到该频道的⼀些历史记录（消息）。（消息量由您决定（最少
超过 5 条消息））。
新消息将⼴播给当前正在查看频道的所有⽤⼾，并添加到历史记录中