name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_DATABASE: chatapp_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          client/package-lock.json
          server/package-lock.json

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Install server dependencies
      run: |
        cd server
        npm ci

    - name: Lint client code
      run: |
        cd client
        npm run ng lint || true  # Continue on lint errors

    - name: Build client
      run: |
        cd client
        npm run build

    - name: Run client unit tests
      run: |
        cd client
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

    - name: Run server integration tests
      run: |
        cd server
        npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/chatapp_test

    - name: Upload client coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Upload server coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  e2e-test:
    runs-on: ubuntu-latest
    needs: test

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_DATABASE: chatapp_test
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: |
          client/package-lock.json
          server/package-lock.json

    - name: Install dependencies
      run: |
        cd client && npm ci
        cd ../server && npm ci

    - name: Install Playwright Browsers
      run: |
        cd client
        npx playwright install chromium

    - name: Build client
      run: |
        cd client
        npm run build

    - name: Start servers and run E2E tests
      run: |
        cd server
        npm start &
        cd ../client
        npm start &
        sleep 30  # Wait for servers to start
        npm run e2e
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/chatapp_test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: client/playwright-report/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit for client
      run: |
        cd client
        npm audit --audit-level=high
      continue-on-error: true

    - name: Run npm audit for server
      run: |
        cd server
        npm audit --audit-level=high
      continue-on-error: true

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install and build client
      run: |
        cd client
        npm ci
        npm run build --prod

    - name: Install server dependencies
      run: |
        cd server
        npm ci --only=production

    - name: Create deployment artifact
      run: |
        mkdir -p deploy
        cp -r client/dist deploy/client
        cp -r server deploy/server
        tar -czf deployment.tar.gz deploy/

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment.tar.gz
        retention-days: 7

  notify:
    runs-on: ubuntu-latest
    needs: [test, e2e-test, security-scan]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.e2e-test.result == 'success'
      run: echo "✅ All tests passed successfully!"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.e2e-test.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        exit 1